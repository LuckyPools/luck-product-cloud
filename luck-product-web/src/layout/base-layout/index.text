<template>
  <AdminLayout
    v-model:sider-collapse="appStore.siderCollapse"
    :mode="layoutMode"
    :scroll-el-id="LAYOUT_SCROLL_EL_ID"
    :scroll-mode="themeStore.layout.scrollMode"
    :is-mobile="appStore.isMobile"
    :full-content="appStore.fullContent"
    :fixed-top="themeStore.fixedHeaderAndTab"
    :header-height="themeStore.header.height"
    :tab-visible="themeStore.tab.visible"
    :tab-height="themeStore.tab.height"
    :content-class="appStore.contentXScrollable ? 'overflow-x-hidden' : ''"
    :sider-visible="siderVisible"
    :sider-width="siderWidth"
    :sider-collapsed-width="siderCollapsedWidth"
    :footer-visible="themeStore.footer.visible"
    :footer-height="themeStore.footer.height"
    :fixed-footer="themeStore.footer.fixed"
    :right-footer="themeStore.footer.right"
  >
    <template #header>
      <GlobalHeader v-bind="headerProps" />
    </template>
    <template #tab>
      <GlobalTab />
    </template>
    <template #sider>
      <GlobalSider />
    </template>
    <GlobalContent />
    <ThemeDrawer />
    <template #footer>
      <GlobalFooter />
    </template>
  </AdminLayout>
</template>
<script>
import { useAppStore } from '@/store/modules/app';
import { useThemeStore } from '@/store/modules/theme';
import GlobalHeader from '../modules/global-header/index.vue';
import GlobalSider from '../modules/global-sider/index.vue';
import GlobalTab from '../modules/global-tab/index.vue';
import GlobalContent from '../modules/global-content/index.vue';
import GlobalFooter from '../modules/global-footer/index.vue';
import ThemeDrawer from '../modules/theme-drawer/index.vue';
import { setupMixMenuContext } from '../context';

import AdminLayout from "@/layout/admin-layout/index.vue";
import { LAYOUT_SCROLL_EL_ID } from '../admin-layout/shared.js';

export default {
    name: 'BaseLayout',
    components: {AdminLayout},
    data() {
        return {
        }
    },
    computed: {
        layoutMode () {
            const vertical = 'vertical';
            const horizontal = 'horizontal';
            return themeStore.layout.mode.includes(vertical) ? vertical : horizontal;
        });

        headerProps () headerPropsConfig[themeStore.layout.mode]);

        siderVisible () themeStore.layout.mode !== 'horizontal');

        isVerticalMix () themeStore.layout.mode === 'vertical-mix');

        isHorizontalMix () themeStore.layout.mode === 'horizontal-mix');

        siderWidth () getSiderWidth());

        siderCollapsedWidth () getSiderCollapsedWidth());

    },
    methods: {
        getSiderWidth() {
            const {width, mixWidth, mixChildMenuWidth} = themeStore.sider;

            let w = isVerticalMix.value || isHorizontalMix.value ? mixWidth : width;

            if (isVerticalMix.value && appStore.mixSiderFixed && menus.value.length) {
                w += mixChildMenuWidth;
            }

            return w;
        },
        getSiderCollapsedWidth() {
            const {collapsedWidth, mixCollapsedWidth, mixChildMenuWidth} = themeStore.sider;

            let w = isVerticalMix.value || isHorizontalMix.value ? mixCollapsedWidth : collapsedWidth;

            if (isVerticalMix.value && appStore.mixSiderFixed && menus.value.length) {
                w += mixChildMenuWidth;
            }

            return w;
        }
    }
}

const appStore = useAppStore();
const themeStore = useThemeStore();
const { menus } = setupMixMenuContext();


const headerPropsConfig: Record<UnionKey.ThemeLayoutMode, App.Global.HeaderProps> = {
    vertical: {
        showLogo: false,
        showMenu: false,
        showMenuToggler: true
    },
    'vertical-mix': {
        showLogo: false,
        showMenu: false,
        showMenuToggler: false
    },
    horizontal: {
        showLogo: true,
        showMenu: true,
        showMenuToggler: false
    },
    'horizontal-mix': {
        showLogo: true,
        showMenu: true,
        showMenuToggler: false
    }
};



</script>

<style>
#__SCROLL_EL_ID__ {
  @include scrollbar();
}
</style>
